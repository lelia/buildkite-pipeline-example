# Buildkite pipeline for: https://github.com/lelia/buildkite-pipeline-example
#
# Note: This pipeline stores its common configuration in the `preflight` directory

# Define the main pipeline steps
steps:
  # Compile the go program and upload the build as an artifact
  - label: ":hammer_and_wrench: build + upload"
    key: "build-upload"
    command: |
      go build -o ${HELLO_APP} ${HELLO_APP}.go
    plugins:
      - artifacts#v1.9.4:
          upload: "${HELLO_APP}"
      - *docker

  # Block the build to require manual user input before proceeding
  - block: ":name_badge: input name"
    key: "input-block"
    depends_on: "build-upload"
    prompt: ":wave: Enter your name to proceed:"
    fields:
      - text: "Your name"
        key: "name-input"
        default: "Lelia"

  # Pass user input to golang tests and upload the results as an artifact
  - label: ":golang: golang tests"
    key: "golang-tests"
    depends_on: "input-block"
    command: |
      go install gotest.tools/gotestsum@v1.12.0
      gotestsum --junitfile ${TEST_RESULTS}
    plugins:
      - artifacts#v1.9.4:
          upload: "${TEST_RESULTS}"
      - *docker

  # Annotate build if any golang tests fail
  - label: ":junit: annotate tests"
    key: "junit-annotate"
    depends_on: "golang-tests"
    plugins:
      - junit-annotate#v2.5.0:
          artifacts: "${TEST_RESULTS}"

  # Download artifact and pass user input to execute the program
  - label: ":rocket: execute program"
    key: "run-app"
    depends_on: "input-block"
    command: |
      chmod +x ./${HELLO_APP}
      ./${HELLO_APP} ${NAME_INPUT}
    plugins:
      - artifacts#v1.9.4:
          download: "${HELLO_APP}"
      - *docker

# Annotate pipeline after program successfully executes
  - label: ":buildkite: annotate pipeline"
    key: "pipeline-annotate"
    depends_on: "run-app"
    if: $$(buildkite-agent step get "outcome" --step "run-app") == "passed"
    command: |
      cat << EOF | buildkite-agent annotate --style "success"
        :wave: Hello, ${NAME_INPUT}! Mission accomplished :tada:
        <br> :package: Noteworthy artifacts:
        * <b><a href="artifact://${TEST_RESULTS}">Golang test results</a></b>
        * <b><a href="artifact://${HELLO_APP}">Hello program binary</a></b>
      EOF
    # command: |
    #   if [ $$(buildkite-agent step get "outcome" --step "run-app") == "passed" ]; then
    #     cat <<- EOF | buildkite-agent annotate --style "success"
    #       :wave: Hello, ${NAME_INPUT}! Mission accomplished :tada:
    #       <br> :package: Noteworthy artifacts:
    #       * <b><a href="artifact://${TEST_RESULTS}">Golang test results</a></b>
    #       * <b><a href="artifact://${HELLO_APP}">Hello program binary</a></b>
    #     EOF
    #   fi
